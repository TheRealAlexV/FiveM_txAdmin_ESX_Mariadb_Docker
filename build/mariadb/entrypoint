#!/bin/sh

# Checking environments and setting defaults ----- Start ----- >
if [ -z "${HOST_UID}" ]; then
  echo "Host user ID not found in environment. Using root (0)."
  export HOST_UID=0
fi

if [ -z "${HOST_GID}" ]; then
  echo "Host group ID not found in environment. Using root (0)."
  export HOST_GID=0
fi

if [ -z "${MYSQL_PASSWORD}" ]; then
  echo "Databaser password not set. Using password"
  export MYSQL_PASSWORD="password"
fi

if [ -z "${DATABASE_SERVICE_NAME}" ]; then
  echo "Using mariadb as sql server"
  export DATABASE_SERVICE_NAME="mariadb"
fi

if [ -z "${MYSQL_DATABASE}" ]; then
  echo "Using FiveMESX as database name"
  export MYSQL_DATABASE="FiveMESX"
fi
# Checking environments and setting defaults ----- End ----- <

if [ -d "/run/mysqld" ]; then
	echo "[i] mysqld already present, skipping creation"
	chown -R mysql:mysql /run/mysqld
else
	echo "[i] mysqld not found, creating...."
	mkdir -p /run/mysqld
	chown -R mysql:mysql /run/mysqld
fi

if [ -d /var/lib/mysql/mysql ]; then
	echo "[i] MySQL directory already present, skipping creation"
	chown -R mysql:mysql /var/lib/mysql
else
	echo "[i] MySQL data directory not found, creating initial DBs"

	chown -R mysql:mysql /var/lib/mysql

	mysql_install_db --user=mysql --ldata=/var/lib/mysql > /dev/null

	MYSQL_DATABASE=${MYSQL_DATABASE:-""}
	MYSQL_USER=${MYSQL_USER:-""}
	MYSQL_PASSWORD=${MYSQL_PASSWORD:-""}

	tfile=$(mktemp)
	if [ ! -f "$tfile" ]; then
	    return 1
	fi

	cat << EOF > $tfile
USE mysql;
FLUSH PRIVILEGES ;
GRANT ALL ON *.* TO 'root'@'%' identified by '$MYSQL_ROOT_PASSWORD' WITH GRANT OPTION ;
GRANT ALL ON *.* TO 'root'@'localhost' identified by '$MYSQL_ROOT_PASSWORD' WITH GRANT OPTION ;
SET PASSWORD FOR 'root'@'localhost'=PASSWORD('${MYSQL_ROOT_PASSWORD}') ;
DROP DATABASE IF EXISTS test ;
FLUSH PRIVILEGES ;
EOF

  if [ "$MYSQL_DATABASE" != "" ]; then
      echo "[i] Creating database: $MYSQL_DATABASE"
    if [ "$MYSQL_CHARSET" != "" ] && [ "$MYSQL_COLLATION" != "" ]; then
      echo "[i] with character set [$MYSQL_CHARSET] and collation [$MYSQL_COLLATION]"
      echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` CHARACTER SET $MYSQL_CHARSET COLLATE $MYSQL_COLLATION;" >> $tfile
    else
      echo "[i] with character set: 'utf8' and collation: 'utf8_general_ci'"
      echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` CHARACTER SET utf8 COLLATE utf8_general_ci;" >> $tfile
    fi
    if [ "$MYSQL_USER" != "" ]; then
    echo "[i] Creating user: $MYSQL_USER with password $MYSQL_PASSWORD"
    echo "GRANT ALL ON \`$MYSQL_DATABASE\`.* to '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';" >> $tfile
    fi
  fi
  /usr/sbin/mysqld --user=mysql --bootstrap --verbose=0 --skip-name-resolve --skip-networking=0 < $tfile > /dev/null 2>&1
  rm -f $tfile

  # Editing the sql file
  FILE=/docker-entrypoint-initdb.d/database.sql
  if test -f "$FILE"; then
    sed -i "s/{MYSQL_DATABASE}/${MYSQL_DATABASE}/g" "$FILE";
    chown mysql:mysql -R /docker-entrypoint-initdb.d
  fi

	for f in /docker-entrypoint-initdb.d/*; do
		case "$f" in
			*.sql)    echo "$0: running $f"; /usr/sbin/mysqld --verbose --user=mysql --bootstrap --verbose=0 --skip-name-resolve --skip-networking=0 < "$f"; echo ;;
			*.sql.gz) echo "$0: running $f"; gunzip -c "$f" | /usr/sbin/mysqld --verbose --user=mysql --bootstrap --verbose=0 --skip-name-resolve --skip-networking=0 < "$f"; echo ;;
			*)        echo "$0: ignoring or entrypoint initdb empty $f" ;;
		esac
		echo
	done

	echo
	echo 'MySQL init process done. Ready for start up.'
	echo
fi

exec /usr/sbin/mysqld --user=mysql --console --skip-name-resolve --skip-networking=0 $@ > /dev/null 2>&1
